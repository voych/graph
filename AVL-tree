#include <iostream>
#include <vector>

using namespace std;


struct node 
{
    int key;
    unsigned char height;
    node* left;
    node* right;
    node(int k) { key = k; left = right = 0; height = 1; }
};

unsigned char height(node* p)
{
    return p ? p->height : 0;
}

int bfactor(node* p)
{
    return height(p->right) - height(p->left);
}

void fixheight(node* p)
{
    unsigned char hl = height(p->left);
    unsigned char hr = height(p->right);
    p->height = (hl > hr ? hl : hr) + 1;
}

node* rotateright(node* p) 
{
    node* q = p->left;
    p->left = q->right;
    q->right = p;
    fixheight(p);
    fixheight(q);
    return q;
}

node* rotateleft(node* q) 
{
    node* p = q->right;
    q->right = p->left;
    p->left = q;
    fixheight(q);
    fixheight(p);
    return p;
}

node* balance(node* p) 
{
    fixheight(p);
    if (bfactor(p) == 2)
    {
        if (bfactor(p->right) < 0)
            p->right = rotateright(p->right);
        return rotateleft(p);
    }
    if (bfactor(p) == -2)
    {
        if (bfactor(p->left) > 0)
            p->left = rotateleft(p->left);
        return rotateright(p);
    }
    return p; 
}

node* insert(node* p, int k) 
{
    if (!p) return new node(k);
    if (k < p->key)
        p->left = insert(p->left, k);
    else
        p->right = insert(p->right, k);
    return balance(p);
}

node* findmin(node* p) 
{
    return p->left ? findmin(p->left) : p;
}

node* removemin(node* p) 
{
    if (p->left == 0)
        return p->right;
    p->left = removemin(p->left);
    return balance(p);
}

node* remove(node* p, int k) 
    if (!p) return 0;
    if (k < p->key)
        p->left = remove(p->left, k);
    else if (k > p->key)
        p->right = remove(p->right, k);
    else //  k == p->key
    {
        node* q = p->left;
        node* r = p->right;
        delete p;
        if (!r) return q;
        node* min = findmin(r);
        min->right = removemin(r);
        min->left = q;
        return balance(min);
    }
    return balance(p);
}

void printTree(node* p)
{
    if (!p) return;
    printTree(p->left);
    cout << p->key << " ";
    printTree(p->right);
}

// Тестирование
int main()
{
    node* root = nullptr;

    // Тестирование вставки
    vector<int> keys = {10, 20, 30, 40, 50, 25};
    cout << "Inserting keys: ";
    for (int key : keys)
    {
        cout << key << " ";
        root = insert(root, key);
    }
    cout << endl;

    cout << "Tree after insertions (in-order traversal): ";
    printTree(root);
    cout << endl;

    // Тестирование удаления
    cout << "Removing key 20" << endl;
    root = remove(root, 20);

    cout << "Tree after removal of 20 (in-order traversal): ";
    printTree(root);
    cout << endl;

    // Дополнительные проверки
    cout << "Removing key 10" << endl;
    root = remove(root, 10);

    cout << "Tree after removal of 10 (in-order traversal): ";
    printTree(root);
    cout << endl;

    return 0;
}
