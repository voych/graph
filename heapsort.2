//heapsort2
#include <iostream>
#include <vector>
#include <stdexcept>
#include <climits>

int PARENT(int i) {
    return (i - 1) / 2;
}

int LEFT(int i) {
    return 2 * i + 1;
}

int RIGHT(int i) {
    return 2 * i + 2;
}

void MAX_HEAPIFY(std::vector<int>& A, int i, int heap_size) {
    int l = LEFT(i);
    int r = RIGHT(i);
    int largest = i;

    if (l < heap_size && A[l] > A[i]) {
        largest = l;
    }

    if (r < heap_size && A[r] > A[largest]) {
        largest = r;
    }

    if (largest != i) {
        std::swap(A[i], A[largest]);
        MAX_HEAPIFY(A, largest, heap_size);
    }
}

void BUILD_MAX_HEAP(std::vector<int>& A) {
    int heap_size = A.size();
    for (int i = heap_size / 2 - 1; i >= 0; --i) {
        MAX_HEAPIFY(A, i, heap_size);
    }
}

void HEAP_INCREASE_KEY(std::vector<int>& A, int i, int key) {
    if (key < A[i]) {
        throw std::invalid_argument("New key is smaller than the current key");
    }

    A[i] = key;

    while (i > 0 && A[PARENT(i)] < A[i]) {
        std::swap(A[i], A[PARENT(i)]);
        i = PARENT(i);
    }
}

void MAX_HEAP_INSERT(std::vector<int>& A, int key) {
    A.push_back(INT_MIN); 
    HEAP_INCREASE_KEY(A, A.size() - 1, key); 
}

int HEAP_EXTRACT_MAX(std::vector<int>& A) {
    if (A.empty()) {
        throw std::out_of_range("Heap is empty");
    }

    int max = A[0];
    A[0] = A.back();
    A.pop_back();
    MAX_HEAPIFY(A, 0, A.size());

    return max;
}

void HEAPSORT(std::vector<int>& A) {
    BUILD_MAX_HEAP(A);
    int heap_size = A.size();

    for (int i = heap_size - 1; i >= 1; --i) {
        std::swap(A[0], A[i]);
        heap_size--;
        MAX_HEAPIFY(A, 0, heap_size);
    }
}

void PRINT_HEAP(const std::vector<int>& A) {
    for (int i = 0; i < A.size(); ++i) {
        std::cout << A[i] << " ";
    }
    std::cout << std::endl;
}

int main() {
    try {
        std::vector<int> A = {3, 5, 1, 10, 2};
        std::cout << "Original array: ";
        PRINT_HEAP(A);

        BUILD_MAX_HEAP(A);

        HEAP_INCREASE_KEY(A, 3, 6);

        MAX_HEAP_INSERT(A, 8);

        int max = HEAP_EXTRACT_MAX(A);
        std::cout << "Extracted max: " << max << std::endl;

        std::vector<int> B = {4, 7, 1, 3, 9};
        HEAPSORT(B);

        // Новый тестовый массив C
        std::vector<int> C = {15, 3, 17, 10, 84, 19, 6, 22, 9};
        std::cout << "Original array C: ";
        PRINT_HEAP(C);
        
        BUILD_MAX_HEAP(C);
        MAX_HEAP_INSERT(C, 95);
        int maxC = HEAP_EXTRACT_MAX(C);
        std::cout << "Extracted max from C: " << maxC << std::endl;
        HEAPSORT(C);

        // Новый тестовый массив D
        std::vector<int> D = {20, 1, 14, 5, 7, 9, 30};
        std::cout << "Original array D: ";
        PRINT_HEAP(D);
        
        BUILD_MAX_HEAP(D);
        HEAP_INCREASE_KEY(D, 2, 25);
        MAX_HEAP_INSERT(D, 50);
        int maxD = HEAP_EXTRACT_MAX(D);
        std::cout << "Extracted max from D: " << maxD << std::endl;
        HEAPSORT(D);

    } catch (const std::exception& e) {
        std::cerr << e.what() << std::endl;
    }

    return 0;
}
